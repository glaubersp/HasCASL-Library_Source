library Prelude/Numbers
version 1.0
%authors: Glauber Cabral <glauber.sp@gmail.com>
%date: 20 June 2008

%{ This library provides the same specifications of naturals and integers from Basic/Numbers but, in place of using subtypes, converting functions were used.}%

%display __<=__ %LATEX __\leq__
%display __>=__ %LATEX __\geq__

%prec( 
  { __ -? __ , __ - __, __ + __ } < 
  { __*__, __ /? __, __ / __, __div__, __mod__, __ quot __, __rem__ } 
)%

%prec( 
  { __*__, __ /? __, __ / __, __div__, __mod__, __ quot __, __rem__ } < 
  { __ ^ __} 
)%

%prec( {-__} <> {__ ^ __} )%

%prec { __ E __ } < { __ ::: __ }

%left_assoc __ + __, __ * __, __ @@ __

%number __@@__

%floating __:::__, __E__

spec Nat = %mono

  free type Nat ::= 0 | suc(pre:? Nat)
 
  preds   __ <= __, __ >= __,
          __ <  __, __ > __:   Nat * Nat;
          even, odd:           Nat

  ops   __! :                       Nat -> Nat;
        __ + __, __ * __, __ ^ __,
        min, max, __ -!__ :         Nat * Nat ->  Nat;
        __ -?__, __ /? __,
        __ div __, __ mod __:       Nat * Nat ->? Nat;

  %% Operations to represent natural numbers with digits:

  ops  1: Nat = suc (0);                      %(1_def_Nat)%
       2: Nat = suc (1);                      %(2_def_Nat)%
       3: Nat = suc (2);                      %(3_def_Nat)%
       4: Nat = suc (3);                      %(4_def_Nat)%
       5: Nat = suc (4);                      %(5_def_Nat)%
       6: Nat = suc (5);                      %(6_def_Nat)%
       7: Nat = suc (6);                      %(7_def_Nat)%
       8: Nat = suc (7);                      %(8_def_Nat)%
       9: Nat = suc (8);                      %(9_def_Nat)%

       __ @@ __ (m:Nat;n:Nat): Nat = (m * suc(9)) + n   %(decimal_def)%

  %% implied operation attributes :

  ops __+__: Nat * Nat -> Nat, 
             comm, assoc, unit 0; %implied
      __*__: Nat * Nat -> Nat, 
             comm, assoc, unit 1; %implied
      min:   Nat * Nat -> Nat, 
             comm, assoc;         %implied
      max:   Nat * Nat -> Nat, 
             comm, assoc, unit 0; %implied

  forall m,n,r,s,t : Nat

  %% axioms concerning predicates

     . 0 <= n                           %(leq_def1_Nat)%
     . not suc(n) <= 0                  %(leq_def2_Nat)%
     . suc(m) <= suc(n) <=> m <= n      %(leq_def3_Nat)%

     . m >= n <=> n <= m                %(geq_def_Nat)%
     . m < n  <=> (m <= n /\ not m=n)   %(less_def_Nat)%
     . m > n  <=> n < m                 %(greater_def_Nat)%
   
     . even(0)                          %(even_0_Nat)%
     . even(suc(m)) <=> odd(m)          %(even_suc_Nat)%
     . odd(m) <=> not even(m)           %(odd_def_Nat)%

  %% axioms concerning operations

     . 0! = 1                           %(factorial_0)%
     . suc(n)! =suc(n)*n!               %(factorial_suc)%

     . 0 + m = m                        %(add_0_Nat)%
     . suc(n) + m = suc(n + m)          %(add_suc_Nat)%

     . 0 * m = 0                        %(mult_0_Nat)%
     . suc(n) * m = (n * m) + m         %(mult_suc_Nat)%
     . m ^ 0 = 1                        %(power_0_Nat)%
     . m ^ suc(n)  = m * m ^ n          %(power_suc_Nat)%

     . min(m,n) = m when m <= n else n  %(min_def_Nat)%
     . max(m,n) = n when m <= n else m  %(max_def_Nat)%

     . n -! m = 0      if m >  n        %(subTotal_def1_Nat)%
     . n -! m = n -? m if m <= n        %(subTotal_def2_Nat)%

     . def(m-?n) <=> m >= n             %(sub_dom_Nat)% %implied 
     . m -? n = r <=> m = r + n         %(sub_def_Nat)%

     . def(m /? n) <=> 
       not n=0 /\ m mod n = 0               %(divide_dom_Nat)% %implied
     . not def(m /? 0)                      %(divide_0_Nat)%
     . ( m /? n = r <=> m = r * n ) if n>0  %(divide_Pos_Nat)%

     . def ( m div n ) <=> not n=0             %(div_dom_Nat)% %implied 
     . m div n = r <=> 
       (exists s: Nat . m = n*r + s /\ s < n)  %(div_Nat)%

     . def ( m mod n ) <=> not n=0             %(mod_dom_Nat)% %implied 
     . m mod n = s <=> 
       (exists r: Nat . m = n*r + s /\ s < n)  %(mod_Nat)%

  %% important laws

     . (r + s) * t = (r * t) + (s * t)  %(distr1_Nat)% %implied 
     . t * (r + s) = (t * r) + (t * s)  %(distr2_Nat)% %implied

then %implies

     forall m,n,r,s:Nat
     . min(m,0)=0                                  %(min_0)% 
     . m = (m div n) * n + (m mod n) if not n = 0  %(div_mod_Nat)%
     . m ^(r+s) = m^r * m^s                        %(power_Nat)%

end

spec Int = %mono

  Nat 

then %mono

     generated type Int ::= __ - __(Nat;Nat)
     forall a,b,c,d: Nat
     .  a - b = c - d <=> a + d = c + b    %(equality_Int)%

     ops NatToInt__: Nat -> Int;
	 IntToNat__: Int ->? Nat
     forall a,b:Nat; c:Int
     . NatToInt a = (a - 0)                      %(NatToInt)%
     . IntToNat (a-b) = a -! b                   %(IntToNat)%

then %def

     preds __ <= __, __ >= __,
           __ <  __, __ >  __: Int * Int;
           even, odd :         Int

     ops  - __, sign: Int -> Int;
          abs:        Int -> Nat;
          __ + __,__ * __, __ - __,
          min, max:                          Int * Int -> Int;
          __ ^ __:                           Int * Nat -> Int;
          __ /? __, 
          __ div __, __ quot __, __ rem __ : Int * Int ->? Int;
	  __ mod __:                         Int * Int ->? Nat;
	  0,1,2,3,4,5,6,7,8,9:               Int
        
  %% implied operation attributes :

     ops __+__:   Int * Int -> Int, 
                  comm, assoc, unit 0; %implied
         __*__:   Int * Int -> Int, 
                  comm, assoc, unit 1; %implied
         min,max: Int * Int -> Int, 
                  comm, assoc;         %implied

     forall  m,n,r,s,t: Int; a,b,c,d: Nat

  %% axioms concerning predicates

     %%. m <= n <=> IntToNat (n - m) in Nat      %(leq_def_Int)%
     . m >= n <=> n <= m  	               %(geq_def_Int)%
     . m < n <=> (m <= n /\ not m=n)           %(less_def_Int)%
     . m > n <=> n < m   	               %(greater_def_Int)%

     . even(m) <=> even(abs(m))                %(even_def_Int)%
     . odd(m)  <=> not even(m)                 %(odd_def_Int)%
     . odd(m)  <=> odd(abs(m))                 %(odd_alt_Int)%

  %% axioms concerning operations

     . - (a - b) = b - a                       %(neg_def_Int)%

     . sign(m) = 0 when m = 0 
           else (1 when m > 0 else -1)         %(sign_def_Int)% 
  
     . abs(m) = IntToNat(- m) when m < 0                  
            else  IntToNat(m)                  %(abs_def_Int)%

     . (a - b) + (c - d) = (a + c) - (b + d)   %(add_def_Int)%
     . (a - b) * (c - d) = 
       (a * c + b * d) - (b * c + a * d)       %(mult_def_Int)%
     .  m - n = m + ( - n )                    %(sub_def_Int)%
		
     . min(m,n) = m when m <= n else n         %(min_def_Int)%
     . max(m,n) = n when m <= n else m         %(max_def_Int)%

     . (- 1) ^ a = 1 when even(a) else - 1     %(power_neg1_Int)%
     . m ^ a = sign(m)^a * (NatToInt(abs(m)))^a  
       if not m = -1                           %(power_others_Int)%

     . def (m /? n) <=> m mod n = 0            %(divide_dom2_Int)% %implied
     . m /? n = r <=> not n = 0 /\ n * r = m   %(divide_alt_Int)% %implied 
     . m /? n = 
       sign(m) * sign(n) * ((NatToInt(abs(m))) /? (NatToInt(abs(n))))  %(divide_Int)%

     . def ( m div n ) <=> not n=0             %(div_dom_Int)% %implied 
     . m div n = r <=> 
       (exists a: Nat . 
        m = (n*r) + NatToInt(a) /\ a < abs(n) )            %(div_Int)%


     . def ( m quot n ) <=> not n=0            %(quot_dom_Int)% %implied 
     . (m quot n = r <=> 
         (exists s: Int . 
           m = n*r + s /\  
             0 >= s /\ s > - NatToInt(abs(n)) )
       ) if m < 0                              %(quot_neg_Int)%
     . (m quot n = r <=> 
         (exists s: Int . 
            m = n*r + s /\  
              0 <= s /\ s < NatToInt(abs(n)) )
       ) if m >= 0                             %(quot_nonneg_Int)%

     . def ( m rem n ) <=> not n=0             %(rem_dom_Int)% %implied 
     . (m rem n = s <=> 
         (exists r: Int . 
           m = n*r + s /\  
             0 >= s /\ s > - NatToInt(abs(n)) )
       ) if m < 0                              %(quot_rem_Int)%
     . (m rem n = s <=> 
         (exists r: Int . 
            m = n*r + s /\  
              0 <= s /\ s < NatToInt(abs(n)) )
       ) if m >= 0                             %(rem_nonneg_Int)%

     . def ( m mod n ) <=> not n=0             %(mod_dom_Int)% %implied 
     . m mod n = a <=> 
       (exists r: Int . 
        m = n*r + NatToInt a /\ a < abs(n) )             %(mod_Int)%

  %% important laws

     . (r + s) * t = (r * t) + (s * t)  %(distr1_Int)% %implied 
     . t * (r + s) = (t * r) + (t * s)  %(distr2_Int)% %implied 

then %implies

     forall m,n,r: Int; a,b: Nat
     . def(a -? b) => a -? b = IntToNat(a - b)                %(Int_Nat_sub_compat)%

     . m = sign(m) * NatToInt(abs(m))                         %(abs_decomp_Int)%

     . m mod n = m mod NatToInt(abs(n))                       %(mod_abs_Int)%

     . m = (m div n) * n + NatToInt(m mod n) if not n = 0   %(div_mod_Int)%

     . NatToInt(abs(m quot n)) = NatToInt(abs(m)) quot NatToInt(abs(n))           %(quot_abs_Int)%
     . NatToInt(abs(m rem  n)) = NatToInt(abs(m)) rem  NatToInt(abs(n))           %(rem_abs_Int)%
     . m = (m quot n) * n + (m rem n) if not n = 0  %(quot_rem_Int)%

     . m ^(a+b) = m^a * m^b                         %(power_Int)%

end
